let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
imap <C-R>	 <Plug>snipMateShow
imap <S-Tab> <Plug>snipMateBack
inoremap <C-C> 
inoremap <silent> <Plug>snipMateShow =snipMate#ShowAvailableSnips()
inoremap <silent> <Plug>snipMateBack =snipMate#BackwardsSnippet()
inoremap <silent> <Plug>snipMateTrigger =snipMate#TriggerSnippet(1)
inoremap <silent> <Plug>snipMateNextOrTrigger =snipMate#TriggerSnippet()
imap <C-G>S <Plug>ISurround
imap <C-G>s <Plug>Isurround
imap <C-S> <Plug>Isurround
inoremap <C-Space> 
imap <C-;> 
nmap v <Plug>SlimeConfig
nmap  <Plug>SlimeParagraphSend
xmap  <Plug>SlimeRegionSend
xmap 	 <Plug>snipMateVisual
smap 	 <Plug>snipMateNextOrTrigger
nmap 	 "wy
xnoremap <silent>  :call multiple_cursors#new("v", 0)
nnoremap <silent>  :call multiple_cursors#new("n", 1)
map  :bd 	   " CTRL+Q - –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π –±—É—Ñ—Ñ–µ—Ä
map –™ }
map —è z
map —á x
map —Ü w
map –º v
map –µ t
map —ã s
map –∫ r
map –π q
map –∑ p
map —â o
map —Ç n
map –¥ l
map –ª k
map –æ j
map —à i
map —Ä h
map –ø–ê gF
map –ø–∞ gf
map –ø–™ g}
map –ø—ä g]
map –ø g
map –ê F
map –∞ f
map –≤ d
map —Å c
map –∏ b
map —ä ]
map –¶ W
map –ï T
map –´ S
map –ö R
map –ó P
map –î L
map –õ K
map –û J
map –† H
map –Æ >
map –ë <
nmap  :!/home/max/scrCATALOG/bash/trunkMaxSql.sh
xmap S <Plug>VSurround
nnoremap <silent> \mt :MinimapToggle
nnoremap <silent> \mc :MinimapClose
nnoremap <silent> \mu :MinimapUpdate
nnoremap <silent> \mm :Minimap
map \t <Plug>TaskList
nnoremap \Td :set ft=django
nnoremap \Tc :set ft=css
nnoremap \Tj :set ft=javascript
nnoremap \Tp :set ft=python
nnoremap \Th :set ft=htmljinja
nmap cS <Plug>CSurround
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
vmap gx <Plug>NetrwBrowseXVis
nmap gx <Plug>NetrwBrowseX
xnoremap <silent> g<M-n> :call multiple_cursors#select_all("v", 0)
xnoremap <silent> g√Æ :call multiple_cursors#select_all("v", 0)
nnoremap <silent> g<M-n> :call multiple_cursors#select_all("n", 0)
nnoremap <silent> g√Æ :call multiple_cursors#select_all("n", 0)
xnoremap <silent> g<C-N> :call multiple_cursors#new("v", 0)
xnoremap <silent> g :call multiple_cursors#new("v", 0)
nnoremap <silent> g<C-N> :call multiple_cursors#new("n", 0)
nnoremap <silent> g :call multiple_cursors#new("n", 0)
xmap gS <Plug>VgSurround
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
nnoremap <F8> :call conque_term#set_mappings("toggle")
nnoremap <silent> <F10> :call conque_term#send_file()
vnoremap <silent> <F9> :call conque_term#send_selected(visualmode())
nnoremap <SNR>124_: :=v:count ? v:count : ''
noremap <silent> <Plug>AirlineSelectNextTab :exe repeat(':tabn|', v:count1)
noremap <silent> <Plug>AirlineSelectPrevTab gT
noremap <silent> <Plug>AirlineSelectTab9 :9tabn
noremap <silent> <Plug>AirlineSelectTab8 :8tabn
noremap <silent> <Plug>AirlineSelectTab7 :7tabn
noremap <silent> <Plug>AirlineSelectTab6 :6tabn
noremap <silent> <Plug>AirlineSelectTab5 :5tabn
noremap <silent> <Plug>AirlineSelectTab4 :4tabn
noremap <silent> <Plug>AirlineSelectTab3 :3tabn
noremap <silent> <Plug>AirlineSelectTab2 :2tabn
noremap <silent> <Plug>AirlineSelectTab1 :1tabn
vnoremap <Right> <Nop>
vnoremap <Left> <Nop>
vnoremap <Down> <Nop>
vnoremap <Up> <Nop>
nnoremap <SNR>128_: :=v:count ? v:count : ''
smap <S-Tab> <Plug>snipMateBack
vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())
nmap <C-C>v <Plug>SlimeConfig
nmap <C-C><C-C> <Plug>SlimeParagraphSend
xmap <C-C><C-C> <Plug>SlimeRegionSend
noremap <SNR>61_Operator :call slime#store_curpos():set opfunc=slime#send_opg@
nnoremap <Plug>CtrlSFQuickfixPrompt :CtrlSFQuickfix 
nnoremap <Plug>CtrlSFPrompt :CtrlSF 
xnoremap <silent> <M-n> :call multiple_cursors#select_all("v", 0)
nnoremap <silent> <M-n> :call multiple_cursors#select_all("n", 1)
xnoremap <silent> <C-N> :call multiple_cursors#new("v", 0)
nnoremap <silent> <C-N> :call multiple_cursors#new("n", 1)
snoremap <silent> <Plug>snipMateBack a=snipMate#BackwardsSnippet()
snoremap <silent> <Plug>snipMateNextOrTrigger a=snipMate#TriggerSnippet()
nnoremap <silent> <Plug>SurroundRepeat .
nnoremap <silent> <F11> :call conque_term#exec_file()
map <C-W>–™ }
map <C-W>—è z
map <C-W>—á x
map <C-W>—Ü w
map <C-W>–º v
map <C-W>–µ t
map <C-W>—ã s
map <C-W>–∫ r
map <C-W>–π q
map <C-W>–∑ p
map <C-W>—â o
map <C-W>—Ç n
map <C-W>–¥ l
map <C-W>–ª k
map <C-W>–æ j
map <C-W>—à i
map <C-W>—Ä h
map <C-W>–ø–ê gF
map <C-W>–ø–∞ gf
map <C-W>–ø–™ g}
map <C-W>–ø—ä g]
map <C-W>–ø g
map <C-W>–ê F
map <C-W>–∞ f
map <C-W>–≤ d
map <C-W>—Å c
map <C-W>–∏ b
map <C-W>—ä ]
map <C-W>–¶ W
map <C-W>–ï T
map <C-W>–´ S
map <C-W>–ö R
map <C-W>–ó P
map <C-W>–î L
map <C-W>–õ K
map <C-W>–û J
map <C-W>–† H
map <C-W>–Æ >
map <C-W>–ë <
nnoremap <F6> :exe "ConqueTermSplit ipython " . expand("%")
nnoremap <F5> :ConqueTermSplit ipython
map <C-Q> :bd 	   " CTRL+Q - –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π –±—É—Ñ—Ñ–µ—Ä
map <F2> :TaskList 	   " –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Å–∫–æ–≤ –Ω–∞ F2
map <F3> :NERDTreeToggle
map <F4> :TagbarToggle
nmap <C-Bslash> :!/home/max/scrCATALOG/bash/trunkMaxSql.sh
nmap <C-I> "wy
nmap <C-Down> :b 
nmap <C-Right> :bp
nmap <C-Left> :bn
nmap <C-Up> :set number!
nmap <Down> :tabnew 
nmap <Left> :tabp
nmap <Right> :tabn
nmap <Up> :set relativenumber! number
onoremap <Right> <Nop>
onoremap <Left> <Nop>
onoremap <Down> <Nop>
onoremap <Up> <Nop>
inoremap  
imap S <Plug>ISurround
imap s <Plug>Isurround
imap 	 <Plug>snipMateNextOrTrigger
imap 	 <Plug>snipMateShow
imap  <Plug>Isurround
xnoremap <silent> √Æ :call multiple_cursors#select_all("v", 0)
nnoremap <silent> √Æ :call multiple_cursors#select_all("n", 1)
map –ø–Å g~
map –ø—á gx
map –ø—Ü gw
map –ø–º gv
map –ø–≥ gu
map –ø–µ gt
map –ø—ã gs
map –ø–∫ gr
map –ø–π gq
map –ø–∑ gp
map –ø—â go
map –ø—å gm
map –ø—Ç gn
map –ø–ª gk
map –ø–æ gj
map –ø—à gi
map –ø—Ä gh
map –ø–ø gg
map –ø–ê gF
map –ø–∞ gf
map –ø—É ge
map –ø–≤ gd
map –ø—Ñ ga
map –ø—ä g]
map –ø–ú gV
map –ø–ì gU
map –ø–ï gT
map –ø–ö gR
map –ø–ô gQ
map –ø–ó gP
map –ø–¢ gN
map –ø–û gJ
map –ø–® gI
map –ø–† gH
map –ø–£ gE
map –ø–í gD
map –ø–ë g<
map –≠—è "z
map –≠–Ω "y
map –≠—á "x
map –≠—Ü "w
map –≠–º "v
map –≠–≥ "u
map –≠–µ "t
map –≠—ã "s
map –≠–∫ "r
map –≠–π "q
map –≠–∑ "p
map –≠—â "o
map –≠—Ç "n
map –≠—å "m
map –≠–¥ "l
map –≠–ª "k
map –≠–æ "j
map –≠—à "i
map –≠—Ä "h
map –≠–ø "g
map –≠–∞ "f
map –≠—É "e
map –≠–≤ "d
map –≠—Å "c
map –≠–∏ "b
map –≠—Ñ "a
map –≠–Ø "Z
map –≠–ù "Y
map –≠–ß "X
map –≠–¶ "W
map –≠–ú "V
map –≠–ì "U
map –≠–ï "T
map –≠–´ "S
map –≠–ö "R
map –≠–ô "Q
map –≠–ó "P
map –≠–© "O
map –≠–¢ "N
map –≠–¨ "M
map –≠–î "L
map –≠–õ "K
map –≠–û "J
map –≠–® "I
map –≠–† "H
map –≠–ü "G
map –≠–ê "F
map –≠–£ "E
map –≠–í "D
map –≠–° "C
map –≠–ò "B
map –≠–§ "A
map –≠—é ".
map –≠–ñ ":
map –≠–≠ ""
map –ø—ç—è g'z
map –ø—ë—è g`z
map –ø—ç–Ω g'y
map –ø—ë–Ω g`y
map –ø—ç—á g'x
map –ø—ë—á g`x
map –ø—ç—Ü g'w
map –ø—ë—Ü g`w
map –ø—ç–º g'v
map –ø—ë–º g`v
map –ø—ç–≥ g'u
map –ø—ë–≥ g`u
map –ø—ç–µ g't
map –ø—ë–µ g`t
map –ø—ç—ã g's
map –ø—ë—ã g`s
map –ø—ç–∫ g'r
map –ø—ë–∫ g`r
map –ø—ç–π g'q
map –ø—ë–π g`q
map –ø—ç–∑ g'p
map –ø—ë–∑ g`p
map –ø—ç—â g'o
map –ø—ë—â g`o
map –ø—ç—Ç g'n
map –ø—ë—Ç g`n
map –ø—ç—å g'm
map –ø—ë—å g`m
map –ø—ç–¥ g'l
map –ø—ë–¥ g`l
map –ø—ç–ª g'k
map –ø—ë–ª g`k
map –ø—ç–æ g'j
map –ø—ë–æ g`j
map –ø—ç—à g'i
map –ø—ë—à g`i
map –ø—ç—Ä g'h
map –ø—ë—Ä g`h
map –ø—ç–ø g'g
map –ø—ë–ø g`g
map –ø—ç–∞ g'f
map –ø—ë–∞ g`f
map –ø—ç—É g'e
map –ø—ë—É g`e
map –ø—ç–≤ g'd
map –ø—ë–≤ g`d
map –ø—ç—Å g'c
map –ø—ë—Å g`c
map –ø—ç–∏ g'b
map –ø—ë–∏ g`b
map –ø—ç—Ñ g'a
map –ø—ë—Ñ g`a
map –ø—ç–Ø g'Z
map –ø—ë–Ø g`Z
map –ø—ç–ù g'Y
map –ø—ë–ù g`Y
map –ø—ç–ß g'X
map –ø—ë–ß g`X
map –ø—ç–¶ g'W
map –ø—ë–¶ g`W
map –ø—ç–ú g'V
map –ø—ë–ú g`V
map –ø—ç–ì g'U
map –ø—ë–ì g`U
map –ø—ç–ï g'T
map –ø—ë–ï g`T
map –ø—ç–´ g'S
map –ø—ë–´ g`S
map –ø—ç–ö g'R
map –ø—ë–ö g`R
map –ø—ç–ô g'Q
map –ø—ë–ô g`Q
map –ø—ç–ó g'P
map –ø—ë–ó g`P
map –ø—ç–© g'O
map –ø—ë–© g`O
map –ø—ç–¢ g'N
map –ø—ë–¢ g`N
map –ø—ç–¨ g'M
map –ø—ë–¨ g`M
map –ø—ç–î g'L
map –ø—ë–î g`L
map –ø—ç–õ g'K
map –ø—ë–õ g`K
map –ø—ç–û g'J
map –ø—ë–û g`J
map –ø—ç–® g'I
map –ø—ë–® g`I
map –ø—ç–† g'H
map –ø—ë–† g`H
map –ø—ç–ü g'G
map –ø—ë–ü g`G
map –ø—ç–ê g'F
map –ø—ë–ê g`F
map –ø—ç–£ g'E
map –ø—ë–£ g`E
map –ø—ç–í g'D
map –ø—ë–í g`D
map –ø—ç–° g'C
map –ø—ë–° g`C
map –ø—ç–ò g'B
map –ø—ë–ò g`B
map –ø—ç–§ g'A
map –ø—ë–§ g`A
map –π, q?
map –π. q/
map –π–ñ q:
map –Ø–ô ZQ
map –Ø–Ø ZZ
map –Æ >
map –ë <
map –¨ M
map –¢ N
map –ò B
map –ú V
map –° C
map –ß X
map –Ø Z
map –Ñ "
map –≠ "
map –ñ :
map –î L
map –õ K
map –û J
map –† H
map –ü G
map –ê F
map –í D
map –Ü S
map –´ S
map –§ A
map –á }
map –™ }
map –• {
map –ó P
map –© O
map –® I
map –ì U
map –ù Y
map –ï T
map –ö R
map –£ E
map –¶ W
map –ô Q
map –Å ~
map –± ,
map –∏ b
map –º v
map –∂ ;
map –¥ l
map –ª k
map –æ j
map –ø g
map –∞ f
map –≤ d
map –∑ p
map –≥ u
map –Ω y
map –µ t
map –∫ r
map –π q
map —à–™ i}
map —Ñ–™ a}
map —à–• i{
map —Ñ–• a{
map —à—Ü iw
map —Ñ—Ü aw
map —à–µ it
map —Ñ–µ at
map —à—ã is
map —Ñ—ã as
map —à–∑ ip
map —Ñ–∑ ap
map —à–∏ ib
map —Ñ–∏ ab
map —à—ë i`
map —Ñ—ë a`
map —à—ä i]
map —Ñ—ä a]
map —à—Ö i[
map —Ñ—Ö a[
map —à–¶ iW
map —Ñ–¶ aW
map —à–ò iB
map —Ñ–ò aB
map —à–Æ i>
map —Ñ–Æ a>
map —à–ë i<
map —Ñ–ë a<
map —à—ç i'
map —Ñ—ç a'
map —à–≠ i"
map —Ñ–≠ a"
map —è—è zz
map —è—á zx
map —è—Ü zw
map —è–º zv
map —è–µ zt
map —è—ã zs
map —è–∫ zr
map —è—â zo
map —è—Ç zn
map —è—å zm
map —è–¥ zl
map —è–ª zk
map —è–æ zj
map —è—à zi
map —è—Ä zh
map —è–ø zg
map —è–∞ zf
map —è—É ze
map —è–≤ zd
map —è—Å zc
map —è–∏ zb
map —è—Ñ za
map —è–ß zX
map —è–¶ zW
map —è–ö zR
map —è–© zO
map —è–¢ zN
map —è–¨ zM
map —è–î zL
map —è–† zH
map —è–ü zG
map —è–ê zF
map —è–£ zE
map —è–í zD
map —è–° zC
map —è–§ zA
map —è—é z.
map —ç—è 'z
map —ë—è `z
map —å—è mz
map —ç–Ω 'y
map —ë–Ω `y
map —å–Ω my
map —ç—á 'x
map —ë—á `x
map —å—á mx
map —ç—Ü 'w
map —ë—Ü `w
map —å—Ü mw
map —ç–º 'v
map —ë–º `v
map —å–º mv
map —ç–≥ 'u
map —ë–≥ `u
map —å–≥ mu
map —ç–µ 't
map —ë–µ `t
map —å–µ mt
map —ç—ã 's
map —ë—ã `s
map —å—ã ms
map —ç–∫ 'r
map —ë–∫ `r
map —å–∫ mr
map —ç–π 'q
map —ë–π `q
map —å–π mq
map —ç–∑ 'p
map —ë–∑ `p
map —å–∑ mp
map —ç—â 'o
map —ë—â `o
map —å—â mo
map —ç—Ç 'n
map —ë—Ç `n
map —å—Ç mn
map —ç—å 'm
map —ë—å `m
map —å—å mm
map —ç–¥ 'l
map —ë–¥ `l
map —å–¥ ml
map —ç–ª 'k
map —ë–ª `k
map —å–ª mk
map —ç–æ 'j
map —ë–æ `j
map —å–æ mj
map —ç—à 'i
map —ë—à `i
map —å—à mi
map —ç—Ä 'h
map —ë—Ä `h
map —å—Ä mh
map —ç–ø 'g
map —ë–ø `g
map —å–ø mg
map —ç–∞ 'f
map —ë–∞ `f
map —å–∞ mf
map —ç—É 'e
map —ë—É `e
map —å—É me
map —ç–≤ 'd
map —ë–≤ `d
map —å–≤ md
map —ç—Å 'c
map —ë—Å `c
map —å—Å mc
map —ç–∏ 'b
map —ë–∏ `b
map —å–∏ mb
map —ç—Ñ 'a
map —ë—Ñ `a
map —å—Ñ ma
map —ç–Ø 'Z
map —ë–Ø `Z
map —å–Ø mZ
map —ç–ù 'Y
map —ë–ù `Y
map —å–ù mY
map —ç–ß 'X
map —ë–ß `X
map —å–ß mX
map —ç–¶ 'W
map —ë–¶ `W
map —å–¶ mW
map —ç–ú 'V
map —ë–ú `V
map —å–ú mV
map —ç–ì 'U
map —ë–ì `U
map —å–ì mU
map —ç–ï 'T
map —ë–ï `T
map —å–ï mT
map —ç–´ 'S
map —ë–´ `S
map —å–´ mS
map —ç–ö 'R
map —ë–ö `R
map —å–ö mR
map —ç–ô 'Q
map —ë–ô `Q
map —å–ô mQ
map —ç–ó 'P
map —ë–ó `P
map —å–ó mP
map —ç–© 'O
map —ë–© `O
map —å–© mO
map —ç–¢ 'N
map —ë–¢ `N
map —å–¢ mN
map —ç–¨ 'M
map —ë–¨ `M
map —å–¨ mM
map —ç–î 'L
map —ë–î `L
map —å–î mL
map —ç–õ 'K
map —ë–õ `K
map —å–õ mK
map —ç–û 'J
map —ë–û `J
map —å–û mJ
map —ç–® 'I
map —ë–® `I
map —å–® mI
map —ç–† 'H
map —ë–† `H
map —å–† mH
map —ç–ü 'G
map —ë–ü `G
map —å–ü mG
map —ç–ê 'F
map —ë–ê `F
map —å–ê mF
map —ç–£ 'E
map —ë–£ `E
map —å–£ mE
map —ç–í 'D
map —ë–í `D
map —å–í mD
map —ç–° 'C
map —ë–° `C
map —å–° mC
map —ç–ò 'B
map —ë–ò `B
map —å–ò mB
map —ç–§ 'A
map —ë–§ `A
map —å–§ mA
map —ä–• ]{
map —ä—è ]z
map —ä—ã ]s
map —ä–∑ ]p
map —ä—å ]m
map —ä—à ]i
map —ä–∞ ]f
map —ä–≤ ]d
map —ä—Å ]c
map —ä—ä ]]
map —ä—Ö ][
map —ä–ó ]P
map —ä–® ]I
map —ä–í ]D
map —ä—ë ]`
map —ä—ç ]'
map —Ö–• [{
map —Ö—è [z
map —Ö—ã [s
map —Ö–∑ [p
map —Ö—å [m
map —Ö—à [i
map —Ö–∞ [f
map —Ö–≤ [d
map —Ö—Å [c
map —Ö—ä []
map —Ö—Ö [[
map —Ö–ó [P
map —Ö–® [I
map —Ö–í [D
map —Ö—ë [`
map —Ö—ç ['
map —ç–™ '}
map —ç–• '{
map —ç—ä ']
map —ç—Ö '[
map —ç–Æ '>
map —ç–ë '<
map —ç—ç ''
map —ë–™ `}
map —ë–• `{
map —ë—ä `]
map —ë—Ö `[
map —ë–Æ `>
map —ë–ë `<
map —ë—ë ``
map —é .
map —å m
map —Ç n
map —Å c
map —á x
map —è z
map —î '
map —ç '
map —Ä h
map —ñ s
map —ã s
map —Ñ a
map —ó ]
map —ä ]
map —Ö [
map —â o
map —à i
map —É e
map —Ü w
map —ë `
map ‚Äô `
cabbr <expr> —Ü–π getcmdtype()==':' && getcmdline()=="—Ü–π"	? "wq"	: "—Ü–π"
cabbr <expr> —Ü getcmdtype()==':' && getcmdline()=="—Ü"	? "w"	: "—Ü"
cabbr <expr> –π—Ñ getcmdtype()==':' && getcmdline()=="–π—Ñ"	? "qa"	: "–π—Ñ"
cabbr <expr> –π getcmdtype()==':' && getcmdline()=="–π"	? "q"	: "–π"
cabbr <expr> –∏—Ç getcmdtype()==':' && getcmdline()=="–∏—Ç"	? "bn"	: "–∏—Ç"
cabbr <expr> –∏–≤ getcmdtype()==':' && getcmdline()=="–∏–≤"	? "bd"	: "–∏–≤"
let &cpo=s:cpo_save
unlet s:cpo_save
set autoread
set background=dark
set backspace=indent,eol,start
set completeopt=menu
set fileencodings=ucs-bom,utf-8,default,latin1
set guicursor=a:blinkon0
set guioptions=aegiLt
set helplang=ru
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set nomodeline
set mousemodel=popup
set printoptions=paper:a4
set ruler
set runtimepath=~/.vim,~/.vim/plugged/vim-log-highlighting,~/.vim/plugged/anderson.vim,~/.vim/plugged/vim-plugin-ruscmd,~/.vim/plugged/nerdtree,~/.vim/plugged/tagbar,~/.vim/plugged/FixedTaskList.vim,~/.vim/plugged/conque-term,~/.vim/plugged/vim-surround,~/.vim/plugged/vim-kalisi,~/.vim/plugged/gruvbox,~/.vim/plugged/vim-snipmate,~/.vim/plugged/vim-addon-mw-utils,~/.vim/plugged/tlib_vim,~/.vim/plugged/vim-snippets,~/.vim/plugged/python-mode,~/.vim/plugged/jedi-vim,~/.vim/plugged/vim-jinja,~/.vim/plugged/vim-python-combined,~/.vim/plugged/vim-ipython,~/.vim/plugged/vim-fugitive,~/.vim/plugged/vim-repeat,~/.vim/plugged/vim-airline,~/.vim/plugged/vim-airline-themes,~/.vim/plugged/vim-minimap,~/.vim/plugged/vim-multiple-cursors,~/.vim/plugged/ag.vim,~/.vim/plugged/ctrlsf.vim,~/.vim/plugged/vim-slime,/var/lib/vim/addons,/etc/vim,/usr/share/vim/vimfiles,/usr/share/vim/vim81,/usr/share/vim/vimfiles/after,/etc/vim/after,/var/lib/vim/addons/after,~/.vim/plugged/vim-snipmate/after,~/.vim/plugged/python-mode/after,~/.vim/plugged/jedi-vim/after,~/.vim/plugged/ctrlsf.vim/after,~/.vim/after
set scrolloff=5
set shiftround
set showmatch
set showtabline=2
set sidescroll=1
set smarttab
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set switchbuf=useopen
set tabline=%!airline#extensions#tabline#get()
set updatetime=50
set wildignore=*.pyc
set nowritebackup
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~/scrCATALOG/Python/potential-enigma/Statistic
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
argglobal
%argdel
$argadd test.py
tabnew
tabnew
tabrewind
edit analizys/db_data/postgresqlQuery.py
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <expr> <C-Space> jedi#complete_string(0)
imap <buffer> <Nul> <C-Space>
onoremap <buffer> C :call pymode#motion#select('^\s*class\s', 0)
nnoremap <buffer> <silent> K :call jedi#show_documentation()
onoremap <buffer> M :call pymode#motion#select('^\s*def\s', 0)
onoremap <buffer> [C :call pymode#motion#move('\v^(class|def)\s', 'b')
nnoremap <buffer> [C :call pymode#motion#move('\v^(class|def)\s', 'b')
vnoremap <buffer> [M :call pymode#motion#vmove('^\s*def\s', 'b')
vnoremap <buffer> [[ :call pymode#motion#vmove('\v^(class|def)\s', 'b')
onoremap <buffer> [M :call pymode#motion#move('^\s*def\s', 'b')
onoremap <buffer> [[ :call pymode#motion#move('\v^(class|def)\s', 'b')
nnoremap <buffer> [M :call pymode#motion#move('^\s*def\s', 'b')
nnoremap <buffer> [[ :call pymode#motion#move('\v^(class|def)\s', 'b')
map <buffer> \8 :PymodeLint
vnoremap <buffer> \r :call jedi#rename_visual()
nnoremap <buffer> \r :call jedi#rename()
nnoremap <buffer> \n :call jedi#usages()
nnoremap <buffer> \s :call jedi#goto_stubs()
nnoremap <buffer> \g :call jedi#goto_assignments()
nnoremap <buffer> \d :call jedi#goto()
nnoremap <buffer> <silent> \b :call pymode#breakpoint#operate(line('.'))
onoremap <buffer> ]C :call pymode#motion#move('\v^(class|def)\s', '')
nnoremap <buffer> ]C :call pymode#motion#move('\v^(class|def)\s', '')
vnoremap <buffer> ]M :call pymode#motion#vmove('^\s*def\s', '')
vnoremap <buffer> ]] :call pymode#motion#vmove('\v^(class|def)\s', '')
onoremap <buffer> ]M :call pymode#motion#move('^\s*def\s', '')
onoremap <buffer> ]] :call pymode#motion#move('\v^(class|def)\s', '')
nnoremap <buffer> ]M :call pymode#motion#move('^\s*def\s', '')
nnoremap <buffer> ]] :call pymode#motion#move('\v^(class|def)\s', '')
vnoremap <buffer> aM :call pymode#motion#select('^\s*def\s', 0)
onoremap <buffer> aM :call pymode#motion#select('^\s*def\s', 0)
vnoremap <buffer> aC :call pymode#motion#select('^\s*class\s', 0)
onoremap <buffer> aC :call pymode#motion#select('^\s*class\s', 0)
vnoremap <buffer> iM :call pymode#motion#select('^\s*def\s', 1)
onoremap <buffer> iM :call pymode#motion#select('^\s*def\s', 1)
vnoremap <buffer> iC :call pymode#motion#select('^\s*class\s', 1)
onoremap <buffer> iC :call pymode#motion#select('^\s*class\s', 1)
snoremap <buffer> <expr> <C-Space> 'c'.jedi#complete_string(0)
smap <buffer> <Nul> <C-Space>
inoremap <buffer> <silent> . .=jedi#complete_string(1)
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),0],:,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,elif,else,for,while,try,except,finally,def,class,with
setlocal colorcolumn=+1
setlocal comments=b:#,fb:-
setlocal commentstring=#\ %s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal cursorlineopt=both
setlocal define=^s*\\(def\\|class\\)
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'python'
setlocal filetype=python
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=-1
setlocal include=^\\s*\\(from\\|import\\)
setlocal includeexpr=substitute(substitute(substitute(v:fname,b:grandparent_match,b:grandparent_sub,''),b:parent_match,b:parent_sub,''),b:child_match,b:child_sub,'g')
setlocal indentexpr=pymode#indent#get_indent(v:lnum)
setlocal indentkeys=!^F,o,O,<:>,0),0],0},=elif,=except
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal nomodeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=jedi#completions
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal scrolloff=-1
setlocal shiftwidth=4
setlocal noshortname
setlocal sidescrolloff=-1
setlocal signcolumn=auto
setlocal smartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(1)
setlocal suffixesadd=.py
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'python'
setlocal syntax=python
endif
setlocal tabstop=8
setlocal tagcase=
setlocal tagfunc=
setlocal tags=
setlocal termwinkey=
setlocal termwinscroll=10000
setlocal termwinsize=
setlocal textwidth=80
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal varsofttabstop=
setlocal vartabstop=
setlocal wincolor=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 23) / 46)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabnext
edit analizys/db_data/collect_data.py
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <expr> <C-Space> jedi#complete_string(0)
imap <buffer> <Nul> <C-Space>
onoremap <buffer> C :call pymode#motion#select('^\s*class\s', 0)
nnoremap <buffer> <silent> K :call jedi#show_documentation()
onoremap <buffer> M :call pymode#motion#select('^\s*def\s', 0)
onoremap <buffer> [C :call pymode#motion#move('\v^(class|def)\s', 'b')
nnoremap <buffer> [C :call pymode#motion#move('\v^(class|def)\s', 'b')
vnoremap <buffer> [M :call pymode#motion#vmove('^\s*def\s', 'b')
vnoremap <buffer> [[ :call pymode#motion#vmove('\v^(class|def)\s', 'b')
onoremap <buffer> [M :call pymode#motion#move('^\s*def\s', 'b')
onoremap <buffer> [[ :call pymode#motion#move('\v^(class|def)\s', 'b')
nnoremap <buffer> [M :call pymode#motion#move('^\s*def\s', 'b')
nnoremap <buffer> [[ :call pymode#motion#move('\v^(class|def)\s', 'b')
map <buffer> \8 :PymodeLint
vnoremap <buffer> \r :call jedi#rename_visual()
nnoremap <buffer> \r :call jedi#rename()
nnoremap <buffer> \n :call jedi#usages()
nnoremap <buffer> \s :call jedi#goto_stubs()
nnoremap <buffer> \g :call jedi#goto_assignments()
nnoremap <buffer> \d :call jedi#goto()
nnoremap <buffer> <silent> \b :call pymode#breakpoint#operate(line('.'))
onoremap <buffer> ]C :call pymode#motion#move('\v^(class|def)\s', '')
nnoremap <buffer> ]C :call pymode#motion#move('\v^(class|def)\s', '')
vnoremap <buffer> ]M :call pymode#motion#vmove('^\s*def\s', '')
vnoremap <buffer> ]] :call pymode#motion#vmove('\v^(class|def)\s', '')
onoremap <buffer> ]M :call pymode#motion#move('^\s*def\s', '')
onoremap <buffer> ]] :call pymode#motion#move('\v^(class|def)\s', '')
nnoremap <buffer> ]M :call pymode#motion#move('^\s*def\s', '')
nnoremap <buffer> ]] :call pymode#motion#move('\v^(class|def)\s', '')
vnoremap <buffer> aM :call pymode#motion#select('^\s*def\s', 0)
onoremap <buffer> aM :call pymode#motion#select('^\s*def\s', 0)
vnoremap <buffer> aC :call pymode#motion#select('^\s*class\s', 0)
onoremap <buffer> aC :call pymode#motion#select('^\s*class\s', 0)
vnoremap <buffer> iM :call pymode#motion#select('^\s*def\s', 1)
onoremap <buffer> iM :call pymode#motion#select('^\s*def\s', 1)
vnoremap <buffer> iC :call pymode#motion#select('^\s*class\s', 1)
onoremap <buffer> iC :call pymode#motion#select('^\s*class\s', 1)
snoremap <buffer> <expr> <C-Space> 'c'.jedi#complete_string(0)
smap <buffer> <Nul> <C-Space>
inoremap <buffer> <silent> . .=jedi#complete_string(1)
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),0],:,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,elif,else,for,while,try,except,finally,def,class,with
setlocal colorcolumn=+1
setlocal comments=b:#,fb:-
setlocal commentstring=#\ %s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal cursorlineopt=both
setlocal define=^s*\\(def\\|class\\)
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'python'
setlocal filetype=python
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=-1
setlocal include=^\\s*\\(from\\|import\\)
setlocal includeexpr=substitute(substitute(substitute(v:fname,b:grandparent_match,b:grandparent_sub,''),b:parent_match,b:parent_sub,''),b:child_match,b:child_sub,'g')
setlocal indentexpr=pymode#indent#get_indent(v:lnum)
setlocal indentkeys=!^F,o,O,<:>,0),0],0},=elif,=except
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal nomodeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=jedi#completions
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal scrolloff=-1
setlocal shiftwidth=4
setlocal noshortname
setlocal sidescrolloff=-1
setlocal signcolumn=auto
setlocal smartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(1)
setlocal suffixesadd=.py
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'python'
setlocal syntax=python
endif
setlocal tabstop=8
setlocal tagcase=
setlocal tagfunc=
setlocal tags=
setlocal termwinkey=
setlocal termwinscroll=10000
setlocal termwinsize=
setlocal textwidth=80
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal varsofttabstop=
setlocal vartabstop=
setlocal wincolor=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 23) / 46)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabnext
edit calculate.py
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <expr> <C-Space> jedi#complete_string(0)
imap <buffer> <Nul> <C-Space>
onoremap <buffer> C :call pymode#motion#select('^\s*class\s', 0)
nnoremap <buffer> <silent> K :call jedi#show_documentation()
onoremap <buffer> M :call pymode#motion#select('^\s*def\s', 0)
onoremap <buffer> [C :call pymode#motion#move('\v^(class|def)\s', 'b')
nnoremap <buffer> [C :call pymode#motion#move('\v^(class|def)\s', 'b')
vnoremap <buffer> [M :call pymode#motion#vmove('^\s*def\s', 'b')
vnoremap <buffer> [[ :call pymode#motion#vmove('\v^(class|def)\s', 'b')
onoremap <buffer> [M :call pymode#motion#move('^\s*def\s', 'b')
onoremap <buffer> [[ :call pymode#motion#move('\v^(class|def)\s', 'b')
nnoremap <buffer> [M :call pymode#motion#move('^\s*def\s', 'b')
nnoremap <buffer> [[ :call pymode#motion#move('\v^(class|def)\s', 'b')
map <buffer> \8 :PymodeLint
vnoremap <buffer> \r :call jedi#rename_visual()
nnoremap <buffer> \r :call jedi#rename()
nnoremap <buffer> \n :call jedi#usages()
nnoremap <buffer> \s :call jedi#goto_stubs()
nnoremap <buffer> \g :call jedi#goto_assignments()
nnoremap <buffer> \d :call jedi#goto()
nnoremap <buffer> <silent> \b :call pymode#breakpoint#operate(line('.'))
onoremap <buffer> ]C :call pymode#motion#move('\v^(class|def)\s', '')
nnoremap <buffer> ]C :call pymode#motion#move('\v^(class|def)\s', '')
vnoremap <buffer> ]M :call pymode#motion#vmove('^\s*def\s', '')
vnoremap <buffer> ]] :call pymode#motion#vmove('\v^(class|def)\s', '')
onoremap <buffer> ]M :call pymode#motion#move('^\s*def\s', '')
onoremap <buffer> ]] :call pymode#motion#move('\v^(class|def)\s', '')
nnoremap <buffer> ]M :call pymode#motion#move('^\s*def\s', '')
nnoremap <buffer> ]] :call pymode#motion#move('\v^(class|def)\s', '')
vnoremap <buffer> aM :call pymode#motion#select('^\s*def\s', 0)
onoremap <buffer> aM :call pymode#motion#select('^\s*def\s', 0)
vnoremap <buffer> aC :call pymode#motion#select('^\s*class\s', 0)
onoremap <buffer> aC :call pymode#motion#select('^\s*class\s', 0)
vnoremap <buffer> iM :call pymode#motion#select('^\s*def\s', 1)
onoremap <buffer> iM :call pymode#motion#select('^\s*def\s', 1)
vnoremap <buffer> iC :call pymode#motion#select('^\s*class\s', 1)
onoremap <buffer> iC :call pymode#motion#select('^\s*class\s', 1)
snoremap <buffer> <expr> <C-Space> 'c'.jedi#complete_string(0)
smap <buffer> <Nul> <C-Space>
inoremap <buffer> <silent> . .=jedi#complete_string(1)
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),0],:,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,elif,else,for,while,try,except,finally,def,class,with
setlocal colorcolumn=+1
setlocal comments=b:#,fb:-
setlocal commentstring=#\ %s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal cursorlineopt=both
setlocal define=^s*\\(def\\|class\\)
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'python'
setlocal filetype=python
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=-1
setlocal include=^\\s*\\(from\\|import\\)
setlocal includeexpr=substitute(substitute(substitute(v:fname,b:grandparent_match,b:grandparent_sub,''),b:parent_match,b:parent_sub,''),b:child_match,b:child_sub,'g')
setlocal indentexpr=pymode#indent#get_indent(v:lnum)
setlocal indentkeys=!^F,o,O,<:>,0),0],0},=elif,=except
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal nomodeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=jedi#completions
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal scrolloff=-1
setlocal shiftwidth=4
setlocal noshortname
setlocal sidescrolloff=-1
setlocal signcolumn=auto
setlocal smartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(1)
setlocal suffixesadd=.py
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'python'
setlocal syntax=python
endif
setlocal tabstop=8
setlocal tagcase=
setlocal tagfunc=
setlocal tags=
setlocal termwinkey=
setlocal termwinscroll=10000
setlocal termwinsize=
setlocal textwidth=80
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal varsofttabstop=
setlocal vartabstop=
setlocal wincolor=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 23) / 46)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabnext 3
badd +0 test.py
badd +1 analizys/db_data/postgresqlQuery.py
badd +1 analizys/db_data/collect_data.py
badd +1 maxtestlib/db_save/parse_save.py
badd +1 calculate.py
badd +6 ipython\ calculate.py\ -\ 1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToOS
set winminheight=1 winminwidth=1
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
nohlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
